
import React, { useState, useEffect } from 'react';
import { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';
import { generateArticleSummary, storeSummary, getSavedSummary } from '@/services/openAiApi';
import type { NewsArticle } from '@/services/newsApi';

interface AISummaryModalProps {
  article: NewsArticle | null;
  isOpen: boolean;
  onClose: () => void;
}

const AISummaryModal: React.FC<AISummaryModalProps> = ({ article, isOpen, onClose }) => {
  const [loading, setLoading] = useState(false);
  const [summaryPoints, setSummaryPoints] = useState<string[]>([]);

  useEffect(() => {
    if (isOpen && article) {
      const fetchSummary = async () => {
        setLoading(true);
        
        // Check if we have a cached summary
        const savedSummary = getSavedSummary(article.url);
        if (savedSummary) {
          setSummaryPoints(savedSummary.points);
          setLoading(false);
          return;
        }
        
        // Generate a new summary
        try {
          const points = await generateArticleSummary(article.title, article.content || '');
          setSummaryPoints(points);
          storeSummary(article.url, points);
        } catch (error) {
          console.error("Error generating summary:", error);
          setSummaryPoints(["Unable to generate summary. Please try again later."]);
        } finally {
          setLoading(false);
        }
      };
      
      fetchSummary();
    } else {
      setSummaryPoints([]);
    }
  }, [isOpen, article]);

  if (!article) return null;

  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent className="sm:max-w-[500px]">
        <DialogHeader>
          <DialogTitle className="text-lg font-semibold">AI Summary</DialogTitle>
        </DialogHeader>
        <div className="py-4">
          <h3 className="mb-3 font-medium line-clamp-2">{article.title}</h3>
          
          {loading ? (
            <div className="space-y-3">
              <div className="flex items-center gap-2">
                <div className="h-4 w-4 rounded-full bg-primary animate-pulse"></div>
                <div className="h-4 bg-gray-200 rounded w-3/4 animate-pulse"></div>
              </div>
              <div className="flex items-center gap-2">
                <div className="h-4 w-4 rounded-full bg-primary animate-pulse"></div>
                <div className="h-4 bg-gray-200 rounded w-2/3 animate-pulse"></div>
              </div>
              <div className="flex items-center gap-2">
                <div className="h-4 w-4 rounded-full bg-primary animate-pulse"></div>
                <div className="h-4 bg-gray-200 rounded w-5/6 animate-pulse"></div>
              </div>
              <div className="flex items-center gap-2">
                <div className="h-4 w-4 rounded-full bg-primary animate-pulse"></div>
                <div className="h-4 bg-gray-200 rounded w-4/5 animate-pulse"></div>
              </div>
            </div>
          ) : (
            <ul className="space-y-3">
              {summaryPoints.map((point, index) => (
                <li key={index} className="flex items-start gap-2">
                  <span className="h-5 w-5 rounded-full bg-primary text-white flex items-center justify-center text-xs flex-shrink-0 mt-0.5">
                    {index + 1}
                  </span>
                  <span className="text-sm">{point}</span>
                </li>
              ))}
            </ul>
          )}
          
          <div className="mt-6 text-xs text-gray-500 italic">
            This summary was generated by AI and may not capture all nuances of the article.
          </div>
        </div>
      </DialogContent>
    </Dialog>
  );
};

export default AISummaryModal;
